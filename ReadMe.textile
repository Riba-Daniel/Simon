
h1. (simple) Simon BDD framework

Simon is a BDD framework for testing apps on iOS simulators and devices. I've written it to be as simple to use and easy to add to your projects as possible. In fact, it's so simple that all you need to do is to write a story file, include a single line macro to run Simon, and then include another single line macro on each step implementation. 

The bulk of Simon's documentation can be found at "may main site":http://drekka.github.com/Simon and below is a copy of the Quick Start guide form that documentation.

h1. Quick Start Guide

This is intended as a quick, high speed coverage of using Simon. Details for all of this can be found in subsequent parts of this documentation.

h1. Step 1: Including Simon in the test project

To run Simon, you need a test target. This is a duplicate of your app target which runs your app in the simulator or device. The only difference between this target and your main target is that this one includes Simon.

Assuming you have already added the Simon, dNodi and dUsefulStuff frameworks to the test target as outlined in the "Download and Installation":installing.html section, the next thing to do is to tell the test version of the application to start Simon. Add this to your *main.m* file:

{%highlight objc %}
#ifdef INC_SIMON
#import <Simon/SISimon.h>
#endif

int main(int argc, char *argv[]) {
   
   NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

#ifdef INC_SIMON
   SIRun();
#end

   int retVal = UIApplicationMain(argc, argv, nil, @"YourAppDelegate");
   
   [pool release];
   return retVal;
}
{% endhighlight %}

We use guard macros around the Simon code so that you can use this main.m in your release target as well. Just be sure to add *INC_SIMON* as a *Preprocessor flag* in the build target. There are two things to note here, firstly the inclusion of Simon's header file *SISimon.h". Secondly the running of the *SIRun()* macro. This launchs Simon on a background thread so that it can run without interferring with your application.

h1. Step 2: Include story files

Simple enough, with the customer, write the story files and make sure they are included in the test app target. here's an example of a simple story:

File: _MyApp.stories_

{% highlight objc %}
   Given the interface is up
   Then print "hello" on the console
{% endhighlight %}

h1. Step 3: Write the implementations

For Simon to execute a story successfully it needs to have methods which are matched to the steps in the stories and which perform the matching actions for that step. The classes that contain these methods do not need to implement any particular protocol or extend any particular classes. The best and simplest thing is to just create simple classes. For example:

{% highlight objc %}
@interface TestSteps : NSObject
@end

@implementation TestSteps

   -(void) whenTheAppIsUp {
       NSLog(@"The app is up");
   }

   -(void) letsDoSomethingWithPassedValue:(NSString *) aValue {
       NSLog(aValue);
   }

@end
{% endhighlight %}

h1. Step 4: Map the stories to code

Now we have our story files and implementation classes, we need to bring them together. This is done using Simon's *SISIMapStepToSelector(_regex, selector_)* macro. This macro creates the relationship between the step and method so that Simon knows to call it when it is executing the step.

{% highlight objc %}
#import <Simon/SISimon.h>

@interface TestSteps : NSOBject
@end

@implementation TestSteps

   SIMapStepToSelector(@"Given the interface is up", whenTheAppIsUp)
   -(void) whenTheAppIsUp {
       NSLog(@"The app is up");
   }

   SIMapStepToSelector(@"Then print \"(.*)\" on the console", letsDoSomethingWithPassedValue:)
   -(void) letsDoSomethingWithPassedValue:(NSString *) aValue {
       NSLog(aValue);
   }

@end
{% endhighlight %}

You will notice here the usage of regex expressions to capture values from the step text and pass them to the implementation.

h1. Step 5: Add actions and verifications

Simon provides a whole range of macros for interacting with the UI of you app and verifying results:

* *SIAssert....* macros which act like unit test verifiction macros. Simon will record any failures of these macros as test failures. 
* *SIFind...* macros which interrogate the UI. These let you search for UIViews in your UI for using in the test code.
* *SITap...* macros which simulator tap actions on the display. This allows your test code to interact with the UI.

Now lets look at our example with some of these macros added:

{% highlight objc %}
#import <Simon/SISimon.h>

@interface TestSteps : NSOBject
@end

@implementation TestSteps

   SIMapStepToSelector(@"Given the interface is up", whenTheAppIsUp)
   -(void) whenTheAppIsUp {
       NSLog(@"The app is up");
       SITapButtonWithLabel(@"Hello");
   }

   SIMapStepToSelector(@"Then print \"(.*)\" on the console", letsDoSomethingWithPassedValue:)
   -(void) letsDoSomethingWithPassedValue:(NSString *) aValue {
       NSLog(aValue);
       UILabel *label = SIFindView(@"//UILabel[0]");
       SIAssertObjectEquals(@"abc", label.text);
   }

@end
{% endhighlight %}

There are a couple of things happening here. Firstly after the app loads, Simon will tap the "Hello" button. Then in the second step of the story, Simon searches for a UIView which has the UILabel class and returns the 1st one it finds. Then an assert macro is used to verify the text value of that label.

h1. Step 5: Run !

If you now run your test version of the app, Simon will wait for the app's main interface to become active and then start running stories in the background. Once they have finished running, Simon will report the results to both the console and bring up a report screen on the simulator or device.

h1. I'd like to say thanks to several developers for developing the following tools:

* Toma≈æ Kragelj for "Appledoc V2":http://www.gentlebytes.com/home/appledocapp
* Gabriel Handford for "GHUnit":https://github.com/gabriel/gh-unit
* Erik Doernenburg for "OCMock":http://www.mulle-kybernetik.com/software/OCMock

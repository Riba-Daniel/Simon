
h1. (simple) Simon BDD framework

Simon is a BDD framework for testing apps on iOS simulators and devices. I've written it to be as simple to use and easy to add to your projects as possible.

h1. Why use a BDD framework?

Because it enables you to directly map customer stories to executable code which enacts thoses stories. Which means that when the customer ask "But does it work?" you can show them their own stories and those stories being executed. 

h1. How do I install it?

Simon is designed to run on a background thread in your app. To save you from having the headache of working this out, there is a simple macro you can use to install and run stories. This macros:

# Sets up Simon on a background thread.
# Waits for your app to finish loading by watching the UIApplication notifications. 
# Once your app is up, starts running the stories.

You place this macro into the *main.m* file of your app. Here's a simplified example so show you what it looks like:

<pre lang="objc">
#import <UIKit/UIKit.h>

#import "SISimon.h"

int main(int argc, char *argv[]) {
	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];

   // Add Simon.
   SIRun();

   int retVal = UIApplicationMain(argc, argv, nil, @"YourAppDelegate");
   
	[pool release];
	return retVal;
}
</pre>

There are two versions of the macros

* *SIRun()* which searches the app for story files (*.stories) and runs them all.
* *SIRunFile(filename-without-extension)* which runs stories from the specified file only.

h2. How to I write a story?

Stories are written in plan text files with a "stories" extension Here's an example:

_example.stories_
<pre lang="objc">
Story: Example story showing the basic syntax.
Given Simon is working
Then I should be able to see abc and 5 in the log
and say goodby at the end.
</pre>

Thats pretty simple. The *Story: ...* line gives the story a name. The rest of the lines outline the story and what is expected. Simon does impose some rules about the first word on each line. Ultimately it doesn't matter, but by imposing some simple rules, it helps to better understand the stories. Yes you can have more than one per file. Here's an outline f the syntax rules:

* Each story must start with a line that begins with the word *story* or *story:*.
* The structure of the story lines must conform to:
** *As ...* _(optional)_
** *Given ...*
** *And ...* _(zero or more)_
** *Then ...* _(zero or more)_
** *And ...* _(zero or more)_
* Leading and trail blanks are ignored on each line.
* Lines that begin with *#* are treated as comments and ignored.
* Blank lines are ignored.

h2. How do I relate a story to the executable code?

Firstly Simon regards each line in a story as a seperate item to be executed. So lets look at the @Given Simon is working@ line from the above story. Lets say we have a class called StepImplementations and we want to map the step to a method in it. Here's what it would look like:

<pre lang="obj">
#import <SISimon/SISimon.h>

@interface StepImplementation : NSObject {
}
@end

@implmentation StepImplementation

SIMapStepToSelector(@"Given Simon is working", simonIsRunning) 
-(void) simonIsRunning {
	NSLog(@"Woo hoo, Simon is running");
}

@end
</pre>

The first thing you wil notice is the inclusion of the SISimon.h header file. A necessary evil unfortunately. The second thing you will notice is the 
<pre>SIMapStepToSelector(@"Given Simon is working", simonIsRunning)</pre>
line. That's Simon. This preprocessor directive instructs Simon to map the given step to the selector. 

Now it's not obvious from the above, but that first parameter is a "regular expression":http://developer.apple.com/library/ios/#documentation/Foundation/Reference/NSRegularExpression_Class as specified in the doc for the "NSRegularExpression class":http://developer.apple.com/library/ios/#documentation/Foundation/Reference/NSRegularExpression_Class in Apple's documentation. This means that we can use it to pick up a wide variety of steps and also (using regular expression groups) pick out arguments to pass to the selector. Oh, and the second argument is the selector to execute. You don't need to use objective C's @selector(...)@ with this as Simon needs it as text. Plus it's less to type in :-)

h2. How do I map arguments in a step?

Lets look at the *Then ...* step

<pre>Then I should be able to see abc and 5 in the log</pre>

As you can see there are two possible arguments in this step - *abc* and *5*. Simon can map these quite simply. The only rule is that the order of arguments in the method that will be executed matches the order of arguments in the step. Of course Simon also expects that the data types are a match as well. Here's the mapping:

<pre>
SIMapStepToSelector(@".* I should be able to see (.*) and (.*) in the log", verifyText:andNumber:) 
-(void) verifyText:(NSString *) text andNumber:(int) number {
	NSLog(@"Text: %@", text);
	NSLog(@"Number: %i", number);
}
</pre>

Simon will automatically scan the data types of the arguments and attempt a matching conversion. Also notice that in the regular expression I set the start to match any characters. This means that, for example, I could use this same expression with both a *Then ...* and a *And ...* step.

Note that each step in a story can matched to only one selector. But that a selector can be mapped to any number of story steps. This gives you the ability to share code across many steps, saving you from repeat yourself.

h1. How do I interact with my app?

Initially Simon is just about running code. So it's effectively a runner for Unit Tests. The next release is planned to include utilities that will provide the means to interact with the GUI of your app. (I'm working as hard on this as I can - there's a lot to do :-)

h1. I'd like to say thanks to several developers for developing the following tools which have helped me tremendously is developing Simon:

* Toma≈æ Kragelj for "Appledoc V2":http://www.gentlebytes.com/home/appledocapp
* Gabriel Handford for "GHUnit":https://github.com/gabriel/gh-unit
* Erik Doernenburg for "OCMock":http://www.mulle-kybernetik.com/software/OCMock
